pipeline {
    agent any

    stages {
        stage('clone code') {
            steps {
                git branch: 'dev', credentialsId: 'GITHUB_TOKEN', url: 'https://github.com/secondphantom/deeptodo-spring'
            }
        }
        stage('copy env') {
            steps {
                withCredentials([file(credentialsId: 'deeptodo-dev-properites', variable: 'PROPERTIES_FILE'),file(credentialsId: 'deeptodo-test-properites', variable: 'PROPERTIES_TEST_FILE')]) {
                    script {
                        sh 'mkdir -p src/main/resources'
                        sh 'mkdir -p src/test/resources'
                        sh 'cp -f $PROPERTIES_FILE src/main/resources/application.yml'
                        sh 'cp -f $PROPERTIES_TEST_FILE src/test/resources/application.yml'
                    }
                }
            }
        }
        stage('copy code to ansible') {
            steps {
                sshPublisher(
                    publishers:
                    [sshPublisherDesc(configName: 'ansible-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'rm -rf target/deeptodo/dev', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: ''), sshTransfer(cleanRemote: false, excludes: '', execCommand: 'echo "copy"', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: 'target/deeptodo/dev', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '**')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)]
                )
            }
        }
        stage('build docker file') {
            steps {
                timeout(time: 4, unit: 'MINUTES') {
                  sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'ansible-playbook -i hosts.yml ./target/deeptodo/dev/script/docker-dev-build-playbook.yml', execTimeout: 240000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }
        }
        stage('deploy dev') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'ansible-playbook -i hosts.yml ./target/deeptodo/dev/script/deploy-dev-playbook.yml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }
        }

    }
}
